#!/usr/bin/perl

use Digest::SHA qw(sha1_hex);
use Convert::Base32;
use Fcntl ':flock';
use Getopt::Long;
use Pod::Usage;
use File::Temp qw(tempfile);
use File::Copy qw(copy move);

my %options = ( type => 'ansi256', output => '-' );
GetOptions( \%options, 'type=s', 'help|?' ) or pod2usage(2);

pod2usage(1) if $options{help};
pod2usage(1) if !@ARGV;

my $file = '/etc/users.oath';
open( my $fhlock, '+<', $file ) or die "Can't open $file: $!";
flock( $fhlock, LOCK_EX ) or die "Can't flock $file: $!";

my ( $fh, $tempfile ) = tempfile( UNLINK => 1 );

copy( $file, $tempfile );

my %users;
while (<$fh>) {
    my ( $user, $secret ) = (split)[ 1, 3 ];
    $users{$user} = $secret;
}

while ( my $user = shift @ARGV ) {
    if ( not exists $users{$user} ) {
        open( my $random, '<', '/dev/random' )
          or die "Can't open /dev/random: $!\n";
        my $secret;
        my $read = read( $random, $secret, 16 );
        if ( not defined $read or $read != 16 ) {
            die "Read not enough randomness: $!\n";
        }
        $secret = sha1_hex($secret);
        print {$fh} "HOTP/T30/6 $user + $secret\n";
    }
    print_qrcode( $user, $users{$user} );
}

close $fh or die "Can't close file: $!\n";
move( $tempfile, $file );
close $fhlock or die "Can't close file: $!\n";

sub print_qrcode {
    my ( $user, $secret ) = @_;
    my $base32 = uc( encode_base32( pack( "H*", $secret ) ) );
    my $text = "otpauth://totp/$user\@taz?secret=$base32";
    if ( $options{'type'} !~ /^(ansi256|ascii)$/i ) {
        $options{'output'} = "$user." . lc( $options{'type'} );
    }
    system( 'qrencode', "--type=$options{'type'}",
        "--output=$options{'output'}", $text ) == 0
      or die "Can't execute qrencode: $!\n";
    print $qrcode . "\n";

}

__END__

=pod

=head1 NAME

otpuser - print otp qrcodes for OATH Toolkit

=head1 SYNOPSIS

  otpuser [--type png|eps|ansi|ansi256] USER...

=head1 DESCRIPTION

Prints qrcodes for existing and new OATH Toolkit users. If the user
already exists in I</etc/users.oath>, the qrcode will just be printed to
stdout. Otherwise otpuser generate a new secret by reading I</dev/random>,
adds a line to I</etc/users.oath> and then prints the new qrcode.

=head1 OPTIONS

=over 4

=item --type png|eps|ansi|ansi256

If type is ansi or ansi256 (default) print the qrcode to stdout. In any
other case save the qrcode as file. The filename will be constructed
from the username and the type.

=back

=head1 INSTALLATION

Just copy the script somewhere in your path and install its only
dependencies qrencode and Convert::Base32. In Debian you just need
the following:

  apt-get install libconvert-base32-perl qrencode

=head1 LIMITATIONS

Currently the format for new users is hardcoded in the script:

  HOTP/T30/6 $USER + $SECRET

=head1 SEE ALSO

L<OATH Toolkit|http://www.nongnu.org/oath-toolkit>

=head1 COPYRIGHT AND LICENSE

Copyright 2014 Mario Domgoergen L<E<lt>mario@domgoergen.comE<gt>>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
